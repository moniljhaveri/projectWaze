/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "Node.h"
#include <vector>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< Node >::const_reference std_vector_Sl_Node_Sg__get(std::vector< Node > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Node_Sg__set(std::vector< Node > *self,int i,std::vector< Node >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Node * >::const_reference std_vector_Sl_Node_Sm__Sg__get(std::vector< Node * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Node_Sm__Sg__set(std::vector< Node * > *self,int i,std::vector< Node * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Node::linkedNode >::const_reference std_vector_Sl_Node_linkedNode_Sg__get(std::vector< Node::linkedNode > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Node_linkedNode_Sg__set(std::vector< Node::linkedNode > *self,int i,std::vector< Node::linkedNode >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< Node * > * >::const_reference std_vector_Sl_std_vector_Sl_Node_Sm__Sg__Sm__Sg__get(std::vector< std::vector< Node * > * > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_Node_Sm__Sg__Sm__Sg__set(std::vector< std::vector< Node * > * > *self,int i,std::vector< std::vector< Node * > * >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1Node_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (Node *)new Node(arg1,arg2,arg3);
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1Node_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  double arg2 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  result = (Node *)new Node(arg1,arg2);
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1Node_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Node *)new Node(arg1);
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1Node_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Node *)new Node();
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  result = (int) ((arg1)->ID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1node_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  arg2 = *(Node **)&jarg2; 
  if (arg1) (arg1)->node = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1node_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  result = (Node *) ((arg1)->node);
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1linkedNode_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node::linkedNode **)&jarg1; 
  result = (double) ((arg1)->distance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1Node_1linkedNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Node::linkedNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Node::linkedNode *)new Node::linkedNode();
  *(Node::linkedNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1Node_1linkedNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Node::linkedNode *arg1 = (Node::linkedNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Node::linkedNode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addLinkedNodeRaw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Node **)&jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addLinkedNodeRaw(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addLinkedNodeRaw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  Node *arg3 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Node **)&jarg3; 
  (arg1)->addLinkedNodeRaw(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addLinkedNodeRaw_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->addLinkedNodeRaw(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addLinkedNodeRaw_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->addLinkedNodeRaw();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addLinkedNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Node *arg1 = (Node *) 0 ;
  Node::linkedNode arg2 ;
  Node::linkedNode *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Node **)&jarg1; 
  argp2 = *(Node::linkedNode **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Node::linkedNode");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->addLinkedNode(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1removeLinkedNode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Node **)&jarg1; 
  arg2 = *(Node **)&jarg2; 
  (arg1)->removeLinkedNode(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1removeLinkedNode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->removeLinkedNode();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1restoreLinks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->restoreLinks();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1removeNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->removeNode();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1addNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->addNode();
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1isInGraph(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (bool)(arg1)->isInGraph();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getDistanceTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Node **)&jarg1; 
  arg2 = *(Node **)&jarg2; 
  result = (double)(arg1)->getDistanceTo(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getDistanceTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getDistanceTo();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getLinkedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  vector< Node::linkedNode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (arg1)->getLinkedNodes();
  *(vector< Node::linkedNode > **)&jresult = new vector< Node::linkedNode >((const vector< Node::linkedNode > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getNumberOfLinkedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (int)(arg1)->getNumberOfLinkedNodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1hasLinkedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (bool)(arg1)->hasLinkedNodes();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setID_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Node *arg1 = (Node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setID(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setID_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setID();
}


SWIGEXPORT jint JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (int)(arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setLatLon_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  Node *arg1 = (Node *) 0 ;
  double arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLatLon(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setLatLon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Node *arg1 = (Node *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLatLon(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setLatLon_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setLatLon();
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getLat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getLat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getLon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getLon();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setDistanceFromStart_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Node *arg1 = (Node *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDistanceFromStart(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setDistanceFromStart_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setDistanceFromStart();
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getDistanceFromStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getDistanceFromStart();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setParent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Node *arg1 = (Node *) 0 ;
  Node *arg2 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Node **)&jarg1; 
  arg2 = *(Node **)&jarg2; 
  (arg1)->setParent(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setParent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setParent();
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (Node *)(arg1)->getParent();
  *(Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setHVal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Node *arg1 = (Node *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHVal(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setHVal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setHVal();
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getHVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getHVal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setGVal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  Node *arg1 = (Node *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setGVal(arg2);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1setGVal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  (arg1)->setGVal();
}


SWIGEXPORT jdouble JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_Node_1getGVal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  Node *arg1 = (Node *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Node **)&jarg1; 
  result = (double)(arg1)->getGVal();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1Node(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Node *arg1 = (Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Node **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_reset_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< Node > *arg1 = (vector< Node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Node > **)&jarg1; 
  reset_nodes(arg1);
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_restore_1all_1links(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  vector< Node > *arg1 = (vector< Node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(vector< Node > **)&jarg1; 
  restore_all_links(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1NodeVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Node > *)new std::vector< Node >();
  *(std::vector< Node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1NodeVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Node >::size_type arg1 ;
  std::vector< Node > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Node >::size_type)jarg1; 
  result = (std::vector< Node > *)new std::vector< Node >(arg1);
  *(std::vector< Node > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  result = ((std::vector< Node > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  result = ((std::vector< Node > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  arg2 = (std::vector< Node >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  result = (bool)((std::vector< Node > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  std::vector< Node >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  arg2 = *(std::vector< Node >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Node >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Node >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node >::value_type *) &std_vector_Sl_Node_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Node >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_NodeVec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  int arg2 ;
  std::vector< Node >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Node > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Node >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Node >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Node_Sg__set(arg1,arg2,(Node const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1NodeVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Node > *arg1 = (std::vector< Node > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Node > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1PathVec_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Node * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Node * > *)new std::vector< Node * >();
  *(std::vector< Node * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1PathVec_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Node * >::size_type arg1 ;
  std::vector< Node * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Node * >::size_type)jarg1; 
  result = (std::vector< Node * > *)new std::vector< Node * >(arg1);
  *(std::vector< Node * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  result = ((std::vector< Node * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  result = ((std::vector< Node * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  arg2 = (std::vector< Node * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  result = (bool)((std::vector< Node * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  std::vector< Node * >::value_type *arg2 = 0 ;
  std::vector< Node * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  temp2 = *(std::vector< Node * >::value_type *)&jarg2;
  arg2 = (std::vector< Node * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< Node * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  std::vector< Node * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node * >::value_type *) &std_vector_Sl_Node_Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Node * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_PathVec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  int arg2 ;
  std::vector< Node * >::value_type *arg3 = 0 ;
  std::vector< Node * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< Node * >::value_type *)&jarg3;
  arg3 = (std::vector< Node * >::value_type *)&temp3; 
  try {
    std_vector_Sl_Node_Sm__Sg__set(arg1,arg2,(Node *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1PathVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Node * > *arg1 = (std::vector< Node * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Node * > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1LinkedNodes_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Node::linkedNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Node::linkedNode > *)new std::vector< Node::linkedNode >();
  *(std::vector< Node::linkedNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1LinkedNodes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Node::linkedNode >::size_type arg1 ;
  std::vector< Node::linkedNode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Node::linkedNode >::size_type)jarg1; 
  result = (std::vector< Node::linkedNode > *)new std::vector< Node::linkedNode >(arg1);
  *(std::vector< Node::linkedNode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  std::vector< Node::linkedNode >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  result = ((std::vector< Node::linkedNode > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  std::vector< Node::linkedNode >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  result = ((std::vector< Node::linkedNode > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  std::vector< Node::linkedNode >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  arg2 = (std::vector< Node::linkedNode >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  result = (bool)((std::vector< Node::linkedNode > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  std::vector< Node::linkedNode >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  arg2 = *(std::vector< Node::linkedNode >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Node::linkedNode >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Node::linkedNode >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  int arg2 ;
  std::vector< Node::linkedNode >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Node::linkedNode >::value_type *) &std_vector_Sl_Node_linkedNode_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Node::linkedNode >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_LinkedNodes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  int arg2 ;
  std::vector< Node::linkedNode >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Node::linkedNode >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Node::linkedNode >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Node_linkedNode_Sg__set(arg1,arg2,(Node::linkedNode const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1LinkedNodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Node::linkedNode > *arg1 = (std::vector< Node::linkedNode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Node::linkedNode > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1K_1Paths_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< Node * > * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< Node * > * > *)new std::vector< std::vector< Node * > * >();
  *(std::vector< std::vector< Node * > * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_new_1K_1Paths_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< Node * > * >::size_type arg1 ;
  std::vector< std::vector< Node * > * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< Node * > * >::size_type)jarg1; 
  result = (std::vector< std::vector< Node * > * > *)new std::vector< std::vector< Node * > * >(arg1);
  *(std::vector< std::vector< Node * > * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  std::vector< std::vector< Node * > * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  result = ((std::vector< std::vector< Node * > * > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  std::vector< std::vector< Node * > * >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  result = ((std::vector< std::vector< Node * > * > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  std::vector< std::vector< Node * > * >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  arg2 = (std::vector< std::vector< Node * > * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  result = (bool)((std::vector< std::vector< Node * > * > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  std::vector< std::vector< Node * > * >::value_type *arg2 = 0 ;
  std::vector< std::vector< Node * > * >::value_type temp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  temp2 = *(std::vector< std::vector< Node * > * >::value_type *)&jarg2;
  arg2 = (std::vector< std::vector< Node * > * >::value_type *)&temp2; 
  (arg1)->push_back((std::vector< std::vector< Node * > * >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  int arg2 ;
  std::vector< std::vector< Node * > * >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< Node * > * >::value_type *) &std_vector_Sl_std_vector_Sl_Node_Sm__Sg__Sm__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< Node * > * >::value_type *)&jresult = *result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_K_1Paths_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  int arg2 ;
  std::vector< std::vector< Node * > * >::value_type *arg3 = 0 ;
  std::vector< std::vector< Node * > * >::value_type temp3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = *(std::vector< std::vector< Node * > * >::value_type *)&jarg3;
  arg3 = (std::vector< std::vector< Node * > * >::value_type *)&temp3; 
  try {
    std_vector_Sl_std_vector_Sl_Node_Sm__Sg__Sm__Sg__set(arg1,arg2,(std::vector< Node * > *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_google_maps_android_utils_demo_NodeWrapJNI_delete_1K_1Paths(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< Node * > * > *arg1 = (std::vector< std::vector< Node * > * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< Node * > * > **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

